== Starting This App

TODO:  Try compiled faye bayeux server running via init.d, slow boot with faye as middleware and disables development stuff.  

This is pretty much just a run of the mill rails application.  Clone, bundle, rake db:migrate, and then launch the server.  The only odd thing about this app is that you can't run it in development mode because it uses websockets on some of the cooler pages.  

    # Before your first boot, install all dependencies with out worry!
    $  bundle install

    # Don't forget you need to make the database at least once!
    $  bundle exec rake db:migrate

    # Start the server, what a great feeling to have a web page on port 3000!
    $  rails server 

Once that's out of the way, you should be able to navigate to 127.0.0.1:3000 in a web browser...  oh and if you do that on your pi, plugin your pi's address and you can navigate to it from your laptop/ PC.  Don't know the ip address of your pi?  Ask it with the `ifconfig` command :)


== My Raspberry Pi Development Rails App

This repo is quickly becoming everything I develop or prototype on my Raspberry Pi.  
Not every page is completed.  
Maybe you will contribute to incomplete pages by making issues or pull requests?
Or maybe you will contribute to the web and not to me specifically, by simply creating a fork and continuing in an unforseen direction.  

Feel free to create issues to have discussions or see me on a forum :) 


== Notes on video stream

Security cameras can be laggy, who cares, just so long as the data comes in at the proper rate.  
But if you need to steer around a robot, you need close to real time.

So for quick and dirty (laggy) use 
http://blog.miguelgrinberg.com/post/stream-video-from-the-raspberry-pi-camera-to-web-browsers-even-on-ios-and-android
And
http://blog.miguelgrinberg.com/post/how-to-build-and-run-mjpg-streamer-on-the-raspberry-pi 
But don't DL from sourceforge, that webpage should be hauled away as garbage.  
Instead use this fork https://github.com/TheNotary/mjpg-streamer to compile the mjpeg-streamer from.  

For robotic control, use https://www.youtube.com/watch?v=xmE99sHBgy0 instead because you can't fly with lag!  


== Notes on LCD

At present, I have an adafruit 16x2 LCD + keypad kit.  
That uses an i2c controller rather than other methods that use the pi itself to drive the LCD.  
http://www.adafruit.com/products/1115


== Notes on GIOP States

If you need lots of states (like to detect status of many motion detectors or door bells or what have you) you'll want to expand the number of GIO pins on the board (the things that let you poll state).  
Buy http://www.adafruit.com/product/732
Complete tutorial here https://learn.adafruit.com/mcp230xx-gpio-expander-on-the-raspberry-pi


== Time Clocker

This is a secret project.  To enable it, do touch .using_clocker and put clocker's source code in ~/dev/ruby/tc_ruby or w/e it says in gem file.  The source isn't ready yet though.  



== Notes on Audio Recording

Record Multiple Mics:
http://www.instructables.com/id/Multi-Mic-Speech-To-Text-with-Python/


http://www.adafruit.com/products/1381

Mic -> Amp -> USB Audio Jack -> Raspberry Pi

It encodes to a Micro SD card... I think GPIOs alternatively.  







== Exposition (old old writing)

Have you ever wanted a rails app responsible for controling other computers and stuff on your lan?  Say, you have a file server with debian linux, but when it's idling it consumes 52 watts, so you need to be able to shut it down and turn it back on?  Well, one of the features of control switch is a "shutdown" button, so you don't need to login to it with ssh to do `sudo shutdown -h now` and then type in your user password to confirm.  Instead you just navigate to the web app and push the shutdown button.  Then use WOL to boot it back up as needed.  

But you could also deploy this app on a low wattage device, and have it be in charge of shutting down and booting up your PCs.  For instance, the Raspberry Pi consumes a mere 3 watts of power.  

Other features include a WOL table for booting up LAN PCs.  You can also use the built-in web proxy for, say, changing the settings on your router without needing to VPN over to your home LAN (or install Hamachi Logmein).   

For Rasberry Pi Users, you can also install media wiki and it's dependencys and get that running on the ultra slim "nginx" web server.  Doesn't that sound snazzy!  

I'd like to build in DNS features so you can name your PCs wiki.com and control.com to make reaching your servers that much easier, even if your router is super lame and doesn't let you configure static IP addresses and stuff like that.  



== Boot When Pi Boots

Check out the init.d script in docs/control_switch.init.d.  Copy that into /etc/init.d/control_switch.  
Once that's done you should be able to start and stop the server just like a proper service

    /etc/init.d/control_switch start

To get it to boot when the server boots, you'll need to run the below command:

    sudo update-rc.d control_switch defaults

To not have the app boot when the pi boots (to speed up the boot process) run:

    sudo update-rc.d -f control_switch remove


== Installation



To enable shutdowns, you need to create a user group 'wheel' and allow users in that group to be able to shutdown the PC without prompting for a password.  

    $  sudo visudo
    
    %wheel      ALL: NOPASSORSOMETHING: /sbin/shutdown
    
    $  sudo addgroup wheel
    $  sudo vi /etc/groups
    ...
    wheel:blabla:USER_NAME_RUNNING_RAILS_APP




== How I Deploy on Heroku

I created an environment var called HEROKU_DEPLOYING=true

I also made the gem 'sqlite3' conditional, based on that environment var.  

Then to create a Gemfile.lock file without sqlite3 references, I do `HEROKU_DEPLOYING=true bundle install` and that updates the Gemfile.lock as though it were on heroku.  
Next I make that commit and push it up to heroku.  
Then I cand delete that commit since I don't need it after I push to heroku :)

Not I am ignoring Gemfile.lock on the local repo which may confuse me down the road :)


